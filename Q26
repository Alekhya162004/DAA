#include <stdio.h>
#include <limits.h>

#define V 4  // Number of vertices in the graph

// Function to find the minimum of two numbers
int min(int a, int b) {
    return (a < b) ? a : b;
}

// Function to solve the Traveling Salesman Problem using dynamic programming
int tsp(int graph[][V], int mask, int pos, int dp[][V]) {
    // If all cities have been visited, return the cost of returning to the original city
    if (mask == (1 << V) - 1)
        return graph[pos][0];

    // If the subproblem is already solved, return the value from the dp table
    if (dp[mask][pos] != -1)
        return dp[mask][pos];

    // Initialize minimum cost to infinity
    int min_cost = INT_MAX;

    // Try all unvisited cities as the next city
    for (int city = 0; city < V; city++) {
        // If the city is not visited yet and it is reachable from the current city
        if (!(mask & (1 << city)) && graph[pos][city]) {
            // Mark the city as visited (set its bit in the mask)
            int new_mask = mask | (1 << city);
            // Calculate the cost of the path starting from the next city
            int new_cost = graph[pos][city] + tsp(graph, new_mask, city, dp);
            // Update the minimum cost
            min_cost = min(min_cost, new_cost);
        }
    }

    // Save the result to the dp table
    return dp[mask][pos] = min_cost;
}

// Example usage
int main() {
    // Example graph representing the distances between cities
    int graph[V][V] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    // Initialize dp table with -1 (indicating subproblems not solved yet)
    int dp[1 << V][V];
    for (int i = 0; i < (1 << V); i++)
        for (int j = 0; j < V; j++)
            dp[i][j] = -1;

    // Start the TSP from city 0 (origin)
    int mask = 1;  // Mask representing visited cities (set the bit for city 0)
    int pos = 0;   // Current city is city 0
    int min_cost = tsp(graph, mask, pos, dp);

    // Print the minimum cost of the TSP
    printf("Minimum cost for TSP: %d\n", min_cost);

    return 0;
}
