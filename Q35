#include <stdio.h>
#include <stdbool.h>

#define V 4 // Number of vertices in the graph

// Function to check if the given color is safe for the vertex v
bool isSafe(int v, bool graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i])
            return false;
    return true;
}

// Function to recursively solve graph coloring problem using backtracking
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v) {
    // If all vertices are assigned a color, return true
    if (v == V)
        return true;

    // Try different colors for vertex v
    for (int c = 1; c <= m; c++) {
        // Check if assignment of color c to v is safe
        if (isSafe(v, graph, color, c)) {
            color[v] = c;

            // Recur to assign colors to rest of the vertices
            if (graphColoringUtil(graph, m, color, v + 1))
                return true;

            // If assigning color c doesn't lead to a solution, remove it
            color[v] = 0;
        }
    }

    // If no color can be assigned to vertex v, return false
    return false;
}

// Function to solve graph coloring problem
bool graphColoring(bool graph[V][V], int m) {
    int color[V] = {0}; // Initialize all colors as 0 (unassigned)

    // Call graphColoringUtil() for vertex 0
    if (!graphColoringUtil(graph, m, color, 0)) {
        printf("Solution does not exist");
        return false;
    }

    // Print the solution
    printf("Solution exists with following color assignments:\n");
    for (int i = 0; i < V; i++)
        printf("Vertex %d -> Color %d\n", i, color[i]);
    
    return true;
}

// Example usage
int main() {
    bool graph[V][V] = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };
    int m = 3; // Number of colors

    graphColoring(graph, m);
    
    return 0;
}
